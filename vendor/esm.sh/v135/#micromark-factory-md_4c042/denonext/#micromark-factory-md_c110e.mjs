/* esm.sh - esbuild bundle(micromark-factory-mdx-expression@2.0.1) denonext production */
import{markdownLineEnding as z}from"/v135/micromark-util-character@2.0.1/denonext/micromark-util-character.mjs";import{eventsToAcorn as j}from"/v135/micromark-util-events-to-acorn@2.0.2/denonext/micromark-util-events-to-acorn.mjs";import{positionFromEstree as E}from"/v135/unist-util-position-from-estree@2.0.0/denonext/unist-util-position-from-estree.mjs";import{VFileMessage as c}from"/v135/vfile-message@4.0.2/denonext/vfile-message.mjs";var x="https://github.com/micromark/micromark-extension-mdx-expression/tree/main/packages/micromark-extension-mdx-expression",v="#unexpected-end-of-file-in-expression-expected-a-corresponding-closing-brace-for-",A="#unexpected-lazy-line-in-expression-in-container-expected-line-to-be-prefixed",I="#unexpected-type-in-code-expected-an-object-spread-spread",C="#unexpected-extra-content-in-spread-only-a-single-spread-is-supported",F="#could-not-parse-expression-with-acorn";function V(n,f,m,p,a,l,u,s,d,r,i){let o=this,H=this.events.length+3,w=0,g,y;return S;function S(e){return n.enter(m),n.enter(p),n.consume(e),n.exit(p),g=o.now(),b}function b(e){if(e===null){if(y)throw y;let t=new c("Unexpected end of file in expression, expected a corresponding closing brace for `{`",{place:o.now(),ruleId:"unexpected-eof",source:"micromark-extension-mdx-expression"});throw t.url=x+v,t}if(z(e))return n.enter("lineEnding"),n.consume(e),n.exit("lineEnding"),U;if(e===125&&w===0){let t=l?L.call(o,l,u,a,H,g,r||!1,d||!1):{type:"ok",estree:void 0};if(t.type==="ok"){n.enter(p),n.consume(e),n.exit(p);let h=n.exit(m);return s&&t.estree&&Object.assign(h,{estree:t.estree}),f}return y=t.message,n.enter(a),n.consume(e),k}return n.enter(a),k(e)}function k(e){return e===125&&w===0||e===null||z(e)?(n.exit(a),b(e)):(e===123&&!l?w+=1:e===125&&(w-=1),n.consume(e),k)}function U(e){let t=o.now();if(t.line!==g.line&&!i&&o.parser.lazy[t.line]){let h=new c("Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc",{place:o.now(),ruleId:"unexpected-lazy",source:"micromark-extension-mdx-expression"});throw h.url=x+A,h}return b(e)}}function L(n,f,m,p,a,l,u){let s=j(this.events.slice(p),{acorn:n,tokenTypes:[m],acornOptions:f,start:a,expression:!0,allowEmpty:l,prefix:u?"({":"",suffix:u?"})":""}),d=s.estree;if(u&&d){let r=d.body[0];if(r.type!=="ExpressionStatement"||r.expression.type!=="ObjectExpression"){let i=E(r),o=new c("Unexpected `"+r.type+"` in code: expected an object spread (`{...spread}`)",{place:i.start,ruleId:"non-spread",source:"micromark-extension-mdx-expression"});throw o.url=x+I,o}if(r.expression.properties[1]){let i=E(r.expression.properties[1]),o=new c("Unexpected extra content in spread: only a single spread is supported",{place:i.start,ruleId:"spread-extra",source:"micromark-extension-mdx-expression"});throw o.url=x+C,o}if(r.expression.properties[0]&&r.expression.properties[0].type!=="SpreadElement"){let i=E(r.expression.properties[0]),o=new c("Unexpected `"+r.expression.properties[0].type+"` in code: only spread elements are supported",{place:i.start,ruleId:"non-spread",source:"micromark-extension-mdx-expression"});throw o.url=x+I,o}}if(s.error){let r=new c("Could not parse expression with acorn",{cause:s.error,place:{line:s.error.loc.line,column:s.error.loc.column+1,offset:s.error.pos},ruleId:"acorn",source:"micromark-extension-mdx-expression"});return r.url=x+F,{type:"nok",message:r}}return{type:"ok",estree:d}}export{V as factoryMdxExpression};
//# sourceMappingURL=micromark-factory-mdx-expression.mjs.map