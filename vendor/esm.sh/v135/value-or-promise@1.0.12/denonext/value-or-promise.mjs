/* esm.sh - esbuild bundle(value-or-promise@1.0.12) denonext production */
function c(e){return e!=null&&typeof e.then=="function"}var l=e=>{throw e},i=class e{state;constructor(t){let n;try{n=t()}catch(s){this.state={status:"rejected",value:s};return}if(c(n)){this.state={status:"pending",value:n};return}this.state={status:"fulfilled",value:n}}then(t,n){let s=this.state;if(s.status==="pending")return new e(()=>s.value.then(t,n));let u=typeof n=="function"?n:l;if(s.status==="rejected")return new e(()=>u(s.value));try{let r=typeof t=="function"?t:void 0;return r===void 0?new e(()=>s.value):new e(()=>r(s.value))}catch(r){return new e(()=>u(r))}}catch(t){return this.then(void 0,t)}resolve(){let t=this.state;if(t.status==="pending")return Promise.resolve(t.value);if(t.status==="rejected")throw t.value;return t.value}static all(t){let n=!1,s,u=!1,r=[];for(let o of t){let a=o.state;if(a.status==="rejected"){if(n)continue;n=!0,s=a.value;continue}a.status==="pending"&&(u=!0),r.push(a.value)}return u?n?(Promise.all(r).catch(()=>{}),new e(()=>{throw s})):new e(()=>Promise.all(r)):new e(()=>r)}};export{i as ValueOrPromise};
//# sourceMappingURL=value-or-promise.mjs.map