/* esm.sh - esbuild bundle(@noble/curves@1.4.0/abstract/montgomery) denonext production */
import{mod as J,pow as Q}from"/v135/@noble/curves@1.4.0/denonext/abstract/modular.js";import{bytesToNumberLE as $,ensureBytes as D,numberToBytesLE as W,validateObject as X}from"/v135/@noble/curves@1.4.0/denonext/abstract/utils.js";var m=BigInt(0),S=BigInt(1);function Y(y){return X(y,{a:"bigint"},{montgomeryBits:"isSafeInteger",nByteLength:"isSafeInteger",adjustScalarBytes:"function",domain:"function",powPminus2:"function",Gu:"bigint"}),Object.freeze({...y})}function nt(y){let r=Y(y),{P:B}=r,e=t=>J(t,B),L=r.montgomeryBits,f=Math.ceil(L/8),b=r.nByteLength,K=r.adjustScalarBytes||(t=>t),R=r.powPminus2||(t=>Q(t,B-BigInt(2),B));function g(t,n,o){let l=e(t*(n-o));return n=e(n-l),o=e(o+l),[n,o]}function v(t){if(typeof t=="bigint"&&m<=t&&t<B)return t;throw new Error("Expected valid scalar 0 < scalar < CURVE.P")}let T=(r.a-BigInt(2))/BigInt(4);function V(t,n){let o=v(t),l=v(n),p=o,s=S,i=m,a=o,u=S,d=m,c;for(let E=BigInt(L-1);E>=m;E--){let z=l>>E&S;d^=z,c=g(d,s,a),s=c[0],a=c[1],c=g(d,i,u),i=c[0],u=c[1],d=z;let h=s+i,I=e(h*h),P=s-i,A=e(P*P),G=I-A,x=a+u,H=a-u,_=e(H*h),k=e(x*P),M=_+k,O=_-k;a=e(M*M),u=e(p*e(O*O)),s=e(I*A),i=e(G*(I+e(T*G)))}c=g(d,s,a),s=c[0],a=c[1],c=g(d,i,u),i=c[0],u=c[1];let q=R(i);return e(s*q)}function C(t){return W(e(t),f)}function F(t){let n=D("u coordinate",t,f);return b===32&&(n[31]&=127),$(n)}function N(t){let n=D("scalar",t),o=n.length;if(o!==f&&o!==b)throw new Error(`Expected ${f} or ${b} bytes, got ${o}`);return $(K(n))}function w(t,n){let o=F(n),l=N(t),p=V(o,l);if(p===m)throw new Error("Invalid private or public key received");return C(p)}let j=C(r.Gu);function U(t){return w(t,j)}return{scalarMult:w,scalarMultBase:U,getSharedSecret:(t,n)=>w(t,n),getPublicKey:t=>U(t),utils:{randomPrivateKey:()=>r.randomBytes(r.nByteLength)},GuBytes:j}}export{nt as montgomery};
/*! Bundled license information:

@noble/curves/esm/abstract/montgomery.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=montgomery.js.map