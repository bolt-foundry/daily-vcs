/* esm.sh - esbuild bundle(openai@4.53.0/uploads) denonext production */
import { Buffer as __Buffer$ } from "node:buffer";
import{FormData as w,File as p,getMultipartRequestOptions as c,isFsReadStream as g}from"/v135/openai@4.53.0/denonext/_shims.js";import{fileFromPath as R}from"/v135/openai@4.53.0/denonext/_shims.js";var y=t=>t!=null&&typeof t=="object"&&typeof t.url=="string"&&typeof t.blob=="function",a=t=>t!=null&&typeof t=="object"&&typeof t.name=="string"&&typeof t.lastModified=="number"&&b(t),b=t=>t!=null&&typeof t=="object"&&typeof t.size=="number"&&typeof t.type=="string"&&typeof t.text=="function"&&typeof t.slice=="function"&&typeof t.arrayBuffer=="function",m=t=>a(t)||y(t)||g(t);async function u(t,r,o){if(t=await t,o??(o=a(t)?{lastModified:t.lastModified,type:t.type}:{}),y(t)){let n=await t.blob();return r||(r=new URL(t.url).pathname.split(/[\\/]/).pop()??"unknown_file"),new p([n],r,o)}let e=await l(t);if(r||(r=h(t)??"unknown_file"),!o.type){let n=e[0]?.type;typeof n=="string"&&(o={...o,type:n})}return new p(e,r,o)}async function l(t){let r=[];if(typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer)r.push(t);else if(b(t))r.push(await t.arrayBuffer());else if(j(t))for await(let o of t)r.push(o);else throw new Error(`Unexpected data type: ${typeof t}; constructor: ${t?.constructor?.name}; props: ${F(t)}`);return r}function F(t){return`[${Object.getOwnPropertyNames(t).map(o=>`"${o}"`).join(", ")}]`}function h(t){return i(t.name)||i(t.filename)||i(t.path)?.split(/[\\/]/).pop()}var i=t=>{if(typeof t=="string")return t;if(typeof __Buffer$<"u"&&t instanceof __Buffer$)return String(t)},j=t=>t!=null&&typeof t=="object"&&typeof t[Symbol.asyncIterator]=="function",x=t=>t&&typeof t=="object"&&t.body&&t[Symbol.toStringTag]==="MultipartBody",$=async t=>{if(!s(t.body))return t;let r=await d(t.body);return c(r,t)},A=async t=>{let r=await d(t.body);return c(r,t)},d=async t=>{let r=new w;return await Promise.all(Object.entries(t||{}).map(([o,e])=>f(r,o,e))),r},s=t=>{if(m(t))return!0;if(Array.isArray(t))return t.some(s);if(t&&typeof t=="object"){for(let r in t)if(s(t[r]))return!0}return!1},f=async(t,r,o)=>{if(o!==void 0){if(o==null)throw new TypeError(`Received null for "${r}"; to pass null in FormData, you must use the string 'null'`);if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")t.append(r,String(o));else if(m(o)){let e=await u(o);t.append(r,e)}else if(Array.isArray(o))await Promise.all(o.map(e=>f(t,r+"[]",e)));else if(typeof o=="object")await Promise.all(Object.entries(o).map(([e,n])=>f(t,`${r}[${e}]`,n)));else throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${o} instead`)}};export{d as createForm,R as fileFromPath,b as isBlobLike,a as isFileLike,x as isMultipartBody,y as isResponseLike,m as isUploadable,$ as maybeMultipartFormRequestOptions,A as multipartFormRequestOptions,u as toFile};
//# sourceMappingURL=uploads.js.map