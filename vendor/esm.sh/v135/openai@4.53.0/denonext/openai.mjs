/* esm.sh - esbuild bundle(openai@4.53.0) denonext production */
import __Process$ from "node:process";
import*as e from"/v135/openai@4.53.0/denonext/error.js";import*as h from"/v135/openai@4.53.0/denonext/uploads.js";import*as s from"/v135/openai@4.53.0/denonext/core.js";import*as u from"/v135/openai@4.53.0/denonext/pagination.js";import*as r from"/v135/openai@4.53.0/denonext/resources.js";var c,o=class extends s.APIClient{constructor({baseURL:t=s.readEnv("OPENAI_BASE_URL"),apiKey:n=s.readEnv("OPENAI_API_KEY"),organization:E=s.readEnv("OPENAI_ORG_ID")??null,project:d=s.readEnv("OPENAI_PROJECT_ID")??null,...l}={}){if(n===void 0)throw new e.OpenAIError("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");let a={apiKey:n,organization:E,project:d,...l,baseURL:t||"https://api.openai.com/v1"};if(!a.dangerouslyAllowBrowser&&s.isRunningInBrowser())throw new e.OpenAIError(`It looks like you're running in a browser-like environment.

This is disabled by default, as it risks exposing your secret API credentials to attackers.
If you understand the risks and have appropriate mitigations in place,
you can set the \`dangerouslyAllowBrowser\` option to \`true\`, e.g.,

new OpenAI({ apiKey, dangerouslyAllowBrowser: true });

https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety
`);super({baseURL:a.baseURL,timeout:a.timeout??6e5,httpAgent:a.httpAgent,maxRetries:a.maxRetries,fetch:a.fetch}),this.completions=new r.Completions(this),this.chat=new r.Chat(this),this.embeddings=new r.Embeddings(this),this.files=new r.Files(this),this.images=new r.Images(this),this.audio=new r.Audio(this),this.moderations=new r.Moderations(this),this.models=new r.Models(this),this.fineTuning=new r.FineTuning(this),this.beta=new r.Beta(this),this.batches=new r.Batches(this),this.uploads=new r.Uploads(this),this._options=a,this.apiKey=n,this.organization=E,this.project=d}defaultQuery(){return this._options.defaultQuery}defaultHeaders(t){return{...super.defaultHeaders(t),"OpenAI-Organization":this.organization,"OpenAI-Project":this.project,...this._options.defaultHeaders}}authHeaders(t){return{Authorization:`Bearer ${this.apiKey}`}}};c=o;o.OpenAI=c;o.OpenAIError=e.OpenAIError;o.APIError=e.APIError;o.APIConnectionError=e.APIConnectionError;o.APIConnectionTimeoutError=e.APIConnectionTimeoutError;o.APIUserAbortError=e.APIUserAbortError;o.NotFoundError=e.NotFoundError;o.ConflictError=e.ConflictError;o.RateLimitError=e.RateLimitError;o.BadRequestError=e.BadRequestError;o.AuthenticationError=e.AuthenticationError;o.InternalServerError=e.InternalServerError;o.PermissionDeniedError=e.PermissionDeniedError;o.UnprocessableEntityError=e.UnprocessableEntityError;o.toFile=h.toFile;o.fileFromPath=h.fileFromPath;var{OpenAIError:f,APIError:g,APIConnectionError:w,APIConnectionTimeoutError:y,APIUserAbortError:_,NotFoundError:b,ConflictError:v,RateLimitError:C,BadRequestError:O,AuthenticationError:R,InternalServerError:U,PermissionDeniedError:N,UnprocessableEntityError:T}=e,F=h.toFile,k=h.fileFromPath;(function(i){i.Page=u.Page,i.CursorPage=u.CursorPage,i.Completions=r.Completions,i.Chat=r.Chat,i.Embeddings=r.Embeddings,i.Files=r.Files,i.FileObjectsPage=r.FileObjectsPage,i.Images=r.Images,i.Audio=r.Audio,i.Moderations=r.Moderations,i.Models=r.Models,i.ModelsPage=r.ModelsPage,i.FineTuning=r.FineTuning,i.Beta=r.Beta,i.Batches=r.Batches,i.BatchesPage=r.BatchesPage,i.Uploads=r.Uploads})(o||(o={}));var p=class extends o{constructor({baseURL:t=s.readEnv("OPENAI_BASE_URL"),apiKey:n=s.readEnv("AZURE_OPENAI_API_KEY"),apiVersion:E=s.readEnv("OPENAI_API_VERSION"),endpoint:d,deployment:l,azureADTokenProvider:a,dangerouslyAllowBrowser:A,...P}={}){if(!E)throw new e.OpenAIError("The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).");if(typeof a=="function"&&(A=!0),!a&&!n)throw new e.OpenAIError("Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.");if(a&&n)throw new e.OpenAIError("The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.");if(n??(n=I),P.defaultQuery={...P.defaultQuery,"api-version":E},t){if(d)throw new e.OpenAIError("baseURL and endpoint are mutually exclusive")}else{if(d||(d=__Process$.env.AZURE_OPENAI_ENDPOINT),!d)throw new e.OpenAIError("Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable");t=`${d}/openai`}super({apiKey:n,baseURL:t,...P,...A!==void 0?{dangerouslyAllowBrowser:A}:{}}),this.apiVersion="",this._azureADTokenProvider=a,this.apiVersion=E,this._deployment=l}buildRequest(t){if(m.has(t.path)&&t.method==="post"&&t.body!==void 0){if(!s.isObj(t.body))throw new Error("Expected request body to be an object");let n=this._deployment||t.body.model;delete t.body.model,n!==void 0&&!this.baseURL.includes("/deployments")&&(t.path=`/deployments/${n}${t.path}`)}return super.buildRequest(t)}async _getAzureADToken(){if(typeof this._azureADTokenProvider=="function"){let t=await this._azureADTokenProvider();if(!t||typeof t!="string")throw new e.OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${t}`);return t}}authHeaders(t){return{}}async prepareOptions(t){if(t.headers?.Authorization||t.headers?.["api-key"])return super.prepareOptions(t);let n=await this._getAzureADToken();if(t.headers??(t.headers={}),n)t.headers.Authorization=`Bearer ${n}`;else if(this.apiKey!==I)t.headers["api-key"]=this.apiKey;else throw new e.OpenAIError("Unable to handle auth");return super.prepareOptions(t)}},m=new Set(["/completions","/chat/completions","/embeddings","/audio/transcriptions","/audio/translations","/audio/speech","/images/generations"]),I="<Missing Key>",B=o;export{w as APIConnectionError,y as APIConnectionTimeoutError,g as APIError,_ as APIUserAbortError,R as AuthenticationError,p as AzureOpenAI,O as BadRequestError,v as ConflictError,U as InternalServerError,b as NotFoundError,o as OpenAI,f as OpenAIError,N as PermissionDeniedError,C as RateLimitError,T as UnprocessableEntityError,B as default,k as fileFromPath,F as toFile};
//# sourceMappingURL=openai.mjs.map