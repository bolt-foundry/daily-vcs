/* esm.sh - esbuild bundle(openai@4.53.0/_shims/registry) denonext production */
var n=!1,t,r,d,a,i,l,p,f,u,x,R,g,F;function b(e,o={auto:!1}){if(n)throw new Error(`you must \`import 'openai/shims/${e.kind}'\` before importing anything else from openai`);if(t)throw new Error(`can't \`import 'openai/shims/${e.kind}'\` after \`import 'openai/shims/${t}'\``);n=o.auto,t=e.kind,r=e.fetch,d=e.Request,a=e.Response,i=e.Headers,l=e.FormData,p=e.Blob,f=e.File,u=e.ReadableStream,x=e.getMultipartRequestOptions,R=e.getDefaultAgent,g=e.fileFromPath,F=e.isFsReadStream}export{p as Blob,f as File,l as FormData,i as Headers,u as ReadableStream,d as Request,a as Response,n as auto,r as fetch,g as fileFromPath,R as getDefaultAgent,x as getMultipartRequestOptions,F as isFsReadStream,t as kind,b as setShims};
//# sourceMappingURL=registry.js.map