/* esm.sh - esbuild bundle(openai@4.53.0/resources/beta/vector-stores/files) denonext production */
import{APIResource as f}from"/v135/openai@4.53.0/denonext/resource.js";import{sleep as p,isRequestOptions as u}from"/v135/openai@4.53.0/denonext/core.js";import{CursorPage as I}from"/v135/openai@4.53.0/denonext/pagination.js";var l=class extends f{create(s,t,e){return this._client.post(`/vector_stores/${s}/files`,{body:t,...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}retrieve(s,t,e){return this._client.get(`/vector_stores/${s}/files/${t}`,{...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}list(s,t={},e){return u(t)?this.list(s,{},t):this._client.getAPIList(`/vector_stores/${s}/files`,r,{query:t,...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}del(s,t,e){return this._client.delete(`/vector_stores/${s}/files/${t}`,{...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}async createAndPoll(s,t,e){let a=await this.create(s,t,e);return await this.poll(s,a.id,e)}async poll(s,t,e){let a={...e?.headers,"X-Stainless-Poll-Helper":"true"};for(e?.pollIntervalMs&&(a["X-Stainless-Custom-Poll-Interval"]=e.pollIntervalMs.toString());;){let c=await this.retrieve(s,t,{...e,headers:a}).withResponse(),o=c.data;switch(o.status){case"in_progress":let n=5e3;if(e?.pollIntervalMs)n=e.pollIntervalMs;else{let h=c.response.headers.get("openai-poll-after-ms");if(h){let d=parseInt(h);isNaN(d)||(n=d)}}await p(n);break;case"failed":case"completed":return o}}}async upload(s,t,e){let a=await this._client.files.create({file:t,purpose:"assistants"},e);return this.create(s,{file_id:a.id},e)}async uploadAndPoll(s,t,e){let a=await this.upload(s,t,e);return await this.poll(s,a.id,e)}},r=class extends I{};(function(i){i.VectorStoreFilesPage=r})(l||(l={}));export{l as Files,r as VectorStoreFilesPage};
//# sourceMappingURL=files.js.map