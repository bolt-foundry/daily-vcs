/* esm.sh - esbuild bundle(openai@4.53.0/resources/beta/vector-stores/file-batches) denonext production */
import{APIResource as m}from"/v135/openai@4.53.0/denonext/resource.js";import{isRequestOptions as I}from"/v135/openai@4.53.0/denonext/core.js";import{sleep as _}from"/v135/openai@4.53.0/denonext/core.js";import{allSettledWithThrow as w}from"/v135/openai@4.53.0/denonext/lib/Util.js";import{VectorStoreFilesPage as A}from"/v135/openai@4.53.0/denonext/resources/beta/vector-stores/files.js";var c=class extends m{create(s,t,e){return this._client.post(`/vector_stores/${s}/file_batches`,{body:t,...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}retrieve(s,t,e){return this._client.get(`/vector_stores/${s}/file_batches/${t}`,{...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}cancel(s,t,e){return this._client.post(`/vector_stores/${s}/file_batches/${t}/cancel`,{...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}async createAndPoll(s,t,e){let r=await this.create(s,t);return await this.poll(s,r.id,e)}listFiles(s,t,e={},r){return I(e)?this.listFiles(s,t,{},e):this._client.getAPIList(`/vector_stores/${s}/file_batches/${t}/files`,A,{query:e,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers}})}async poll(s,t,e){let r={...e?.headers,"X-Stainless-Poll-Helper":"true"};for(e?.pollIntervalMs&&(r["X-Stainless-Custom-Poll-Interval"]=e.pollIntervalMs.toString());;){let{data:i,response:o}=await this.retrieve(s,t,{...e,headers:r}).withResponse();switch(i.status){case"in_progress":let a=5e3;if(e?.pollIntervalMs)a=e.pollIntervalMs;else{let n=o.headers.get("openai-poll-after-ms");if(n){let l=parseInt(n);isNaN(l)||(a=l)}}await _(a);break;case"failed":case"cancelled":case"completed":return i}}}async uploadAndPoll(s,{files:t,fileIds:e=[]},r){if(t==null||t.length==0)throw new Error("No `files` provided to process. If you've already uploaded files you should use `.createAndPoll()` instead");let i=r?.maxConcurrency??5,o=Math.min(i,t.length),a=this._client,n=t.values(),l=[...e];async function d(p){for(let u of p){let v=await a.files.create({file:u,purpose:"assistants"},r);l.push(v.id)}}let f=Array(o).fill(n).map(d);return await w(f),await this.createAndPoll(s,{file_ids:l})}};c||(c={});export{c as FileBatches,A as VectorStoreFilesPage};
//# sourceMappingURL=file-batches.js.map