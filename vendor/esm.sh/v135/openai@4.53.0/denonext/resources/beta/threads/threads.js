/* esm.sh - esbuild bundle(openai@4.53.0/resources/beta/threads/threads) denonext production */
import{APIResource as u}from"/v135/openai@4.53.0/denonext/resource.js";import{isRequestOptions as h}from"/v135/openai@4.53.0/denonext/core.js";import{AssistantStream as c}from"/v135/openai@4.53.0/denonext/lib/AssistantStream.js";import*as r from"/v135/openai@4.53.0/denonext/resources/beta/threads/messages.js";import*as n from"/v135/openai@4.53.0/denonext/resources/beta/threads/runs/runs.js";var i=class extends u{constructor(){super(...arguments),this.runs=new n.Runs(this._client),this.messages=new r.Messages(this._client)}create(s={},e){return h(s)?this.create({},s):this._client.post("/threads",{body:s,...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}retrieve(s,e){return this._client.get(`/threads/${s}`,{...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}update(s,e,a){return this._client.post(`/threads/${s}`,{body:e,...a,headers:{"OpenAI-Beta":"assistants=v2",...a?.headers}})}del(s,e){return this._client.delete(`/threads/${s}`,{...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}createAndRun(s,e){return this._client.post("/threads/runs",{body:s,...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers},stream:s.stream??!1})}async createAndRunPoll(s,e){let a=await this.createAndRun(s,e);return await this.runs.poll(a.thread_id,a.id,e)}createAndRunStream(s,e){return c.createThreadAssistantStream(s,this._client.beta.threads,e)}};(function(t){t.Runs=n.Runs,t.RunsPage=n.RunsPage,t.Messages=r.Messages,t.MessagesPage=r.MessagesPage})(i||(i={}));export{i as Threads};
//# sourceMappingURL=threads.js.map