/* esm.sh - esbuild bundle(openai@4.53.0/resources/files) denonext production */
import{APIResource as f}from"/v135/openai@4.53.0/denonext/resource.js";import{isRequestOptions as p}from"/v135/openai@4.53.0/denonext/core.js";import{sleep as m}from"/v135/openai@4.53.0/denonext/core.js";import{APIConnectionTimeoutError as u}from"/v135/openai@4.53.0/denonext/error.js";import*as l from"/v135/openai@4.53.0/denonext/core.js";import{Page as h}from"/v135/openai@4.53.0/denonext/pagination.js";var s=class extends f{create(e,t){return this._client.post("/files",l.multipartFormRequestOptions({body:e,...t}))}retrieve(e,t){return this._client.get(`/files/${e}`,t)}list(e={},t){return p(e)?this.list({},e):this._client.getAPIList("/files",i,{query:e,...t})}del(e,t){return this._client.delete(`/files/${e}`,t)}content(e,t){return this._client.get(`/files/${e}/content`,{...t,__binaryResponse:!0})}retrieveContent(e,t){return this._client.get(`/files/${e}/content`,{...t,headers:{Accept:"application/json",...t?.headers}})}async waitForProcessing(e,{pollInterval:t=5e3,maxWait:o=30*60*1e3}={}){let a=new Set(["processed","error","deleted"]),c=Date.now(),r=await this.retrieve(e);for(;!r.status||!a.has(r.status);)if(await m(t),r=await this.retrieve(e),Date.now()-c>o)throw new u({message:`Giving up on waiting for file ${e} to finish processing after ${o} milliseconds.`});return r}},i=class extends h{};(function(n){n.FileObjectsPage=i})(s||(s={}));export{i as FileObjectsPage,s as Files};
//# sourceMappingURL=files.js.map