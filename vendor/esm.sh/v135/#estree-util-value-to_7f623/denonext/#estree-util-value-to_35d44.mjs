/* esm.sh - esbuild bundle(estree-util-value-to-estree@3.0.1) denonext production */
import { Buffer as __Buffer$ } from "node:buffer";
import o from"/v135/is-plain-obj@4.1.0/denonext/is-plain-obj.mjs";function t(e,r={}){if(e===void 0||e===Number.POSITIVE_INFINITY||Number.isNaN(e))return{type:"Identifier",name:String(e)};if(e==null||typeof e=="string"||typeof e=="boolean")return{type:"Literal",value:e};if(typeof e=="bigint")return e>=0?{type:"Literal",value:e,bigint:String(e)}:{type:"UnaryExpression",operator:"-",prefix:!0,argument:t(-e,r)};if(typeof e=="number")return e>=0&&!Object.is(e,-0)?{type:"Literal",value:e}:{type:"UnaryExpression",operator:"-",prefix:!0,argument:t(-e,r)};if(typeof e=="symbol"){if(e.description&&e===Symbol.for(e.description))return{type:"CallExpression",optional:!1,callee:{type:"MemberExpression",computed:!1,optional:!1,object:{type:"Identifier",name:"Symbol"},property:{type:"Identifier",name:"for"}},arguments:[t(e.description,r)]};throw new TypeError(`Only global symbols are supported, got: ${String(e)}`)}if(Array.isArray(e)){let i=[];for(let n=0;n<e.length;n+=1)i.push(n in e?t(e[n],r):null);return{type:"ArrayExpression",elements:i}}if(e instanceof Boolean||e instanceof Number||e instanceof String)return{type:"NewExpression",callee:{type:"Identifier",name:e.constructor.name},arguments:[t(e.valueOf())]};if(e instanceof RegExp)return{type:"Literal",value:e,regex:{pattern:e.source,flags:e.flags}};if(e instanceof Date)return{type:"NewExpression",callee:{type:"Identifier",name:"Date"},arguments:[t(e.getTime(),r)]};if(typeof __Buffer$<"u"&&__Buffer$.isBuffer(e))return{type:"CallExpression",optional:!1,callee:{type:"MemberExpression",computed:!1,optional:!1,object:{type:"Identifier",name:"Buffer"},property:{type:"Identifier",name:"from"}},arguments:[t([...e])]};if(e instanceof BigInt64Array||e instanceof BigUint64Array||e instanceof Float32Array||e instanceof Float64Array||e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Map||e instanceof Set||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Uint16Array||e instanceof Uint32Array)return{type:"NewExpression",callee:{type:"Identifier",name:e.constructor.name},arguments:[t([...e],r)]};if(e instanceof URL||e instanceof URLSearchParams)return{type:"NewExpression",callee:{type:"Identifier",name:e.constructor.name},arguments:[t(String(e),r)]};if(r.instanceAsObject||o(e)){let i=Reflect.ownKeys(e).map(n=>({type:"Property",method:!1,shorthand:!1,computed:typeof n!="string",kind:"init",key:t(n,r),value:t(e[n],r)}));return Object.getPrototypeOf(e)==null&&i.unshift({type:"Property",method:!1,shorthand:!1,computed:!1,kind:"init",key:{type:"Identifier",name:"__proto__"},value:{type:"Literal",value:null}}),{type:"ObjectExpression",properties:i}}throw new TypeError(`Unsupported value: ${String(e)}`)}export{t as valueToEstree};
//# sourceMappingURL=estree-util-value-to-estree.mjs.map