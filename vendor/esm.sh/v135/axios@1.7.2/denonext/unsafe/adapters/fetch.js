/* esm.sh - esbuild bundle(axios@1.7.2/unsafe/adapters/fetch) denonext production */
import D from"/v135/axios@1.7.2/denonext/unsafe/platform.js";import s from"/v135/axios@1.7.2/denonext/unsafe/utils.js";import p from"/v135/axios@1.7.2/denonext/unsafe/core/AxiosError.js";import v from"/v135/axios@1.7.2/denonext/unsafe/helpers/composeSignals.js";import{trackStream as F}from"/v135/axios@1.7.2/denonext/unsafe/helpers/trackStream.js";import k from"/v135/axios@1.7.2/denonext/unsafe/core/AxiosHeaders.js";import O from"/v135/axios@1.7.2/denonext/unsafe/helpers/progressEventReducer.js";import H from"/v135/axios@1.7.2/denonext/unsafe/helpers/resolveConfig.js";import K from"/v135/axios@1.7.2/denonext/unsafe/core/settle.js";var B=(e,r)=>{let o=e!=null;return n=>setTimeout(()=>r({lengthComputable:o,total:e,loaded:n}))},l=typeof fetch=="function"&&typeof Request=="function"&&typeof Response=="function",U=l&&typeof ReadableStream=="function",y=l&&(typeof TextEncoder=="function"?(e=>r=>e.encode(r))(new TextEncoder):async e=>new Uint8Array(await new Response(e).arrayBuffer())),z=U&&(()=>{let e=!1,r=new Request(D.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!r})(),N=64*1024,T=U&&!!(()=>{try{return s.isReadableStream(new Response("").body)}catch{}})(),f={stream:T&&(e=>e.body)};l&&(e=>{["text","arrayBuffer","blob","formData","stream"].forEach(r=>{!f[r]&&(f[r]=s.isFunction(e[r])?o=>o[r]():(o,n)=>{throw new p(`Response type '${r}' is not supported`,p.ERR_NOT_SUPPORT,n)})})})(new Response);var j=async e=>{if(e==null)return 0;if(s.isBlob(e))return e.size;if(s.isSpecCompliantForm(e))return(await new Request(e).arrayBuffer()).byteLength;if(s.isArrayBufferView(e))return e.byteLength;if(s.isURLSearchParams(e)&&(e=e+""),s.isString(e))return(await y(e)).byteLength},I=async(e,r)=>{let o=s.toFiniteNumber(e.getContentLength());return o??j(r)},Y=l&&(async e=>{let{url:r,method:o,data:n,signal:S,cancelToken:x,timeout:b,onDownloadProgress:h,onUploadProgress:C,responseType:a,headers:d,withCredentials:m="same-origin",fetchOptions:_}=H(e);a=a?(a+"").toLowerCase():"text";let[w,E]=S||x||b?v([S,x],b):[],L,c,g=()=>{!L&&setTimeout(()=>{w&&w.unsubscribe()}),L=!0},q;try{if(C&&z&&o!=="get"&&o!=="head"&&(q=await I(d,n))!==0){let i=new Request(r,{method:"POST",body:n,duplex:"half"}),u;s.isFormData(n)&&(u=i.headers.get("content-type"))&&d.setContentType(u),i.body&&(n=F(i.body,N,B(q,O(C)),null,y))}s.isString(m)||(m=m?"cors":"omit"),c=new Request(r,{..._,signal:w,method:o.toUpperCase(),headers:d.normalize().toJSON(),body:n,duplex:"half",withCredentials:m});let t=await fetch(c),R=T&&(a==="stream"||a==="response");if(T&&(h||R)){let i={};["status","statusText","headers"].forEach(P=>{i[P]=t[P]});let u=s.toFiniteNumber(t.headers.get("content-length"));t=new Response(F(t.body,N,h&&B(u,O(h,!0)),R&&g,y),i)}a=a||"text";let A=await f[s.findKey(f,a)||"text"](t,e);return!R&&g(),E&&E(),await new Promise((i,u)=>{K(i,u,{data:A,headers:k.from(t.headers),status:t.status,statusText:t.statusText,config:e,request:c})})}catch(t){throw g(),t&&t.name==="TypeError"&&/fetch/i.test(t.message)?Object.assign(new p("Network Error",p.ERR_NETWORK,e,c),{cause:t.cause||t}):p.from(t,t&&t.code,e,c)}});export{Y as default};

import "https://deno.land/x/xhr@0.3.0/mod.ts";//# sourceMappingURL=fetch.js.map