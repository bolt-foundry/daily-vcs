/* esm.sh - esbuild bundle(@tensorflow/tfjs-backend-webgl@4.15.0/dist/texture_manager) denonext production */
import{env as F}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/tfjs-core.mjs";import{getInternalFormatForFloat16MatrixTexture as _,getInternalFormatForFloat16PackedMatrixTexture as m,getInternalFormatForFloat32MatrixTexture as E,getInternalFormatForPackedMatrixTexture as A,getInternalFormatForUnsignedBytesMatrixTexture as p}from"/v135/@tensorflow/tfjs-backend-webgl@4.15.0/denonext/dist/gpgpu_util.js";import{getPackedMatrixTextureShapeWidthHeight as y,getUnpackedMatrixTextureShapeWidthHeight as B,PhysicalTextureType as s,TextureUsage as T}from"/v135/@tensorflow/tfjs-backend-webgl@4.15.0/denonext/dist/tex_util.js";var c=class{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,r,l){let u=f(r,l),n=d(e,u,l);n in this.freeTextures||(this.freeTextures[n]=[]),n in this.usedTextures||(this.usedTextures[n]=[]);let o=g(e,u,this.gpgpu.gl,this.gpgpu.textureConfig,l);if(this.freeTextures[n].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=o,this.log();let x=this.freeTextures[n].pop();return this.usedTextures[n].push(x),x}let i;return u===s.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):u===s.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):u===s.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):u===s.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):u===s.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[n].push(i),this.numUsedTextures++,this._numBytesAllocated+=o,this.log(),i}releaseTexture(e,r,l,u){if(this.freeTextures==null)return;let n=f(l,u),o=d(r,n,u);o in this.freeTextures||(this.freeTextures[o]=[]);let i=g(r,n,this.gpgpu.gl,this.gpgpu.textureConfig,u),x=F().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");x!==-1&&this._numBytesAllocated>x?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[o].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;let h=this.usedTextures[o],a=h&&h.indexOf(e);if(a==null||a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");h[a]=h[h.length-1],h.pop(),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let r=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*r)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let e in this.freeTextures)this.freeTextures[e].forEach(r=>{this.gpgpu.deleteMatrixTexture(r.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(r=>{this.gpgpu.deleteMatrixTexture(r.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function U(t,e){let r=t;if(e===r.R32F)return 4;if(e===r.R16F)return 2;if(e===r.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===r.RGBA16F)return 8;if(e===r.RGBA8)return 4;throw new Error(`Unknown internal format ${e}`)}function g(t,e,r,l,u){let n=D(e,l),o;if(u){let[x,h]=y(t[0],t[1]);o=x*h}else{let[x,h]=B(t[0],t[1]);o=x*h}let i=U(r,n);return o*i}function D(t,e){switch(t){case s.PACKED_2X2_FLOAT32:return A(e);case s.PACKED_2X2_FLOAT16:return m(e);case s.UNPACKED_FLOAT32:return E(e);case s.UNPACKED_FLOAT16:return _(e);case s.PACKED_4X1_UNSIGNED_BYTE:return p(e);default:throw new Error(`Unknown physical texture type ${t}`)}}function L(t){return F().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?s.PACKED_2X2_FLOAT32:s.UNPACKED_FLOAT32:t?s.PACKED_2X2_FLOAT16:s.UNPACKED_FLOAT16}function f(t,e){if(t===T.UPLOAD)return s.PACKED_2X2_FLOAT32;if(t===T.RENDER||t==null)return L(e);if(t===T.DOWNLOAD||t===T.PIXELS)return s.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${t}`)}function d(t,e,r){return`${t[0]}_${t[1]}_${e}_${r}`}export{c as TextureManager,g as computeBytes};
/*! Bundled license information:

@tensorflow/tfjs-backend-webgl/dist/texture_manager.js:
  (**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)
*/
//# sourceMappingURL=texture_manager.js.map