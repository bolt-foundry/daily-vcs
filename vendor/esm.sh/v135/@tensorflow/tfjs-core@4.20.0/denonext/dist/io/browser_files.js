/* esm.sh - esbuild bundle(@tensorflow/tfjs-core@4.20.0/dist/io/browser_files) denonext production */
import"/v135/@tensorflow/tfjs-core@4.20.0/denonext/dist/flags.js";import{env as g}from"/v135/@tensorflow/tfjs-core@4.20.0/denonext/dist/environment.js";import{basename as w,getModelArtifactsForJSON as m,getModelArtifactsInfoForJSON as u,getModelJSONForModelArtifacts as p}from"/v135/@tensorflow/tfjs-core@4.20.0/denonext/dist/io/io_utils.js";import{IORouterRegistry as E}from"/v135/@tensorflow/tfjs-core@4.20.0/denonext/dist/io/router_registry.js";import{CompositeArrayBuffer as F}from"/v135/@tensorflow/tfjs-core@4.20.0/denonext/dist/io/composite_array_buffer.js";var R="model",y=".json",A=".weights.bin";function d(s){return new Promise(e=>setTimeout(e)).then(s)}var l=class s{constructor(e){if(!g().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(s.URL_SCHEME)&&(e=e.slice(s.URL_SCHEME.length)),(e==null||e.length===0)&&(e=R),this.modelJsonFileName=e+y,this.weightDataFileName=e+A}async save(e){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let o=F.join(e.weightData),i=window.URL.createObjectURL(new Blob([o],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let a=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],n=p(e,a),t=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=t,await d(()=>r.dispatchEvent(new MouseEvent("click"))),e.weightData!=null){let h=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;h.download=this.weightDataFileName,h.href=i,await d(()=>h.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:u(e)}}}};l.URL_SCHEME="downloads://";var c=class{constructor(e){if(e==null||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,o)=>{let i=new FileReader;i.onload=a=>{let n=JSON.parse(a.target.result),t=n.modelTopology;if(t==null){o(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(n.weightsManifest==null){o(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){e({modelTopology:t});return}let h=m(n,f=>this.loadWeights(f));e(h)},i.onerror=a=>o(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),i.readAsText(this.jsonFile)})}loadWeights(e){let o=[],i=[];for(let t of e)o.push(...t.weights),i.push(...t.paths);let a=this.checkManifestAndWeightFiles(e),n=i.map(t=>this.loadWeightsFile(t,a[t]));return Promise.all(n).then(t=>[o,t])}loadWeightsFile(e,o){return new Promise((i,a)=>{let n=new FileReader;n.onload=t=>{let r=t.target.result;i(r)},n.onerror=t=>a(`Failed to weights data from file of path '${e}'.`),n.readAsArrayBuffer(o)})}checkManifestAndWeightFiles(e){let o=[],i=this.weightsFiles.map(n=>w(n.name)),a={};for(let n of e)n.paths.forEach(t=>{let r=w(t);if(o.indexOf(r)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(o.push(r),i.indexOf(r)===-1)throw new Error(`Weight file with basename '${r}' is not provided.`);a[t]=this.weightsFiles[i.indexOf(r)]});if(o.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${o.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return a}},S=s=>g().getBool("IS_BROWSER")&&!Array.isArray(s)&&s.startsWith(l.URL_SCHEME)?M(s.slice(l.URL_SCHEME.length)):null;E.registerSaveRouter(S);function M(s="model"){return new l(s)}function T(s){return new c(s)}export{l as BrowserDownloads,M as browserDownloads,S as browserDownloadsRouter,T as browserFiles};
/*! Bundled license information:

@tensorflow/tfjs-core/dist/io/browser_files.js:
  (**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)
*/
//# sourceMappingURL=browser_files.js.map