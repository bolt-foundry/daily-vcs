/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/// <amd-module name="@tensorflow/tfjs-core/dist/ops/ops" />
export { abs } from './abs.d.ts';
export { acos } from './acos.d.ts';
export { acosh } from './acosh.d.ts';
export { add } from './add.d.ts';
export { addN } from './add_n.d.ts';
export { all } from './all.d.ts';
export { any } from './any.d.ts';
export { argMax } from './arg_max.d.ts';
export { argMin } from './arg_min.d.ts';
export { asin } from './asin.d.ts';
export { asinh } from './asinh.d.ts';
export { atan } from './atan.d.ts';
export { atan2 } from './atan2.d.ts';
export { atanh } from './atanh.d.ts';
export { avgPool } from './avg_pool.d.ts';
export { avgPool3d } from './avg_pool_3d.d.ts';
export { basicLSTMCell } from './basic_lstm_cell.d.ts';
export { batchToSpaceND } from './batch_to_space_nd.d.ts';
export { batchNorm } from './batchnorm.d.ts';
export { batchNorm2d } from './batchnorm2d.d.ts';
export { batchNorm3d } from './batchnorm3d.d.ts';
export { batchNorm4d } from './batchnorm4d.d.ts';
export { bincount } from './bincount.d.ts';
export { bitwiseAnd } from './bitwise_and.d.ts';
export { broadcastArgs } from './broadcast_args.d.ts';
export { broadcastTo } from './broadcast_to.d.ts';
export { buffer } from './buffer.d.ts';
export { cast } from './cast.d.ts';
export { ceil } from './ceil.d.ts';
export { clipByValue } from './clip_by_value.d.ts';
export { clone } from './clone.d.ts';
export { complex } from './complex.d.ts';
export { concat } from './concat.d.ts';
export { concat1d } from './concat_1d.d.ts';
export { concat2d } from './concat_2d.d.ts';
export { concat3d } from './concat_3d.d.ts';
export { concat4d } from './concat_4d.d.ts';
export { conv1d } from './conv1d.d.ts';
export { conv2d } from './conv2d.d.ts';
export { conv2dTranspose } from './conv2d_transpose.d.ts';
export { conv3d } from './conv3d.d.ts';
export { conv3dTranspose } from './conv3d_transpose.d.ts';
export { cos } from './cos.d.ts';
export { cosh } from './cosh.d.ts';
export { cumprod } from './cumprod.d.ts';
export { cumsum } from './cumsum.d.ts';
export { denseBincount } from './dense_bincount.d.ts';
export { depthToSpace } from './depth_to_space.d.ts';
export { depthwiseConv2d } from './depthwise_conv2d.d.ts';
export { diag } from './diag.d.ts';
export { dilation2d } from './dilation2d.d.ts';
export { div } from './div.d.ts';
export { divNoNan } from './div_no_nan.d.ts';
export { dot } from './dot.d.ts';
export { einsum } from './einsum.d.ts';
export { elu } from './elu.d.ts';
export { ensureShape } from './ensure_shape.d.ts';
export { equal } from './equal.d.ts';
export { erf } from './erf.d.ts';
export { euclideanNorm } from './euclidean_norm.d.ts';
export { exp } from './exp.d.ts';
export { expandDims } from './expand_dims.d.ts';
export { expm1 } from './expm1.d.ts';
export { eye } from './eye.d.ts';
export { fill } from './fill.d.ts';
export { floor } from './floor.d.ts';
export { floorDiv } from './floorDiv.d.ts';
export { gather } from './gather.d.ts';
export { greater } from './greater.d.ts';
export { greaterEqual } from './greater_equal.d.ts';
export { imag } from './imag.d.ts';
export { isFinite } from './is_finite.d.ts';
export { isInf } from './is_inf.d.ts';
export { isNaN } from './is_nan.d.ts';
export { leakyRelu } from './leaky_relu.d.ts';
export { less } from './less.d.ts';
export { lessEqual } from './less_equal.d.ts';
export { linspace } from './linspace.d.ts';
export { localResponseNormalization } from './local_response_normalization.d.ts';
export { log } from './log.d.ts';
export { log1p } from './log1p.d.ts';
export { logSigmoid } from './log_sigmoid.d.ts';
export { logSoftmax } from './log_softmax.d.ts';
export { logSumExp } from './log_sum_exp.d.ts';
export { logicalAnd } from './logical_and.d.ts';
export { logicalNot } from './logical_not.d.ts';
export { logicalOr } from './logical_or.d.ts';
export { logicalXor } from './logical_xor.d.ts';
export { lowerBound } from './lower_bound.d.ts';
export { matMul } from './mat_mul.d.ts';
export { max } from './max.d.ts';
export { maxPool } from './max_pool.d.ts';
export { maxPool3d } from './max_pool_3d.d.ts';
export { maxPoolWithArgmax } from './max_pool_with_argmax.d.ts';
export { maximum } from './maximum.d.ts';
export { mean } from './mean.d.ts';
export { meshgrid } from './meshgrid.d.ts';
export { min } from './min.d.ts';
export { minimum } from './minimum.d.ts';
export { mirrorPad } from './mirror_pad.d.ts';
export { mod } from './mod.d.ts';
export { moments } from './moments.d.ts';
export { mul } from './mul.d.ts';
export { LSTMCellFunc, multiRNNCell } from './multi_rnn_cell.d.ts';
export { multinomial } from './multinomial.d.ts';
export { neg } from './neg.d.ts';
export { notEqual } from './not_equal.d.ts';
export { oneHot } from './one_hot.d.ts';
export { ones } from './ones.d.ts';
export { onesLike } from './ones_like.d.ts';
export { outerProduct } from './outer_product.d.ts';
export { pad } from './pad.d.ts';
export { pad1d } from './pad1d.d.ts';
export { pad2d } from './pad2d.d.ts';
export { pad3d } from './pad3d.d.ts';
export { pad4d } from './pad4d.d.ts';
export { pool } from './pool.d.ts';
export { pow } from './pow.d.ts';
export { prelu } from './prelu.d.ts';
export { print } from './print.d.ts';
export { prod } from './prod.d.ts';
export { raggedGather } from './ragged_gather.d.ts';
export { raggedRange } from './ragged_range.d.ts';
export { raggedTensorToTensor } from './ragged_tensor_to_tensor.d.ts';
export { rand } from './rand.d.ts';
export { randomGamma } from './random_gamma.d.ts';
export { randomNormal } from './random_normal.d.ts';
export { randomStandardNormal } from './random_standard_normal.d.ts';
export { randomUniform } from './random_uniform.d.ts';
export { randomUniformInt } from './random_uniform_int.d.ts';
export { range } from './range.d.ts';
export { real } from './real.d.ts';
export { reciprocal } from './reciprocal.d.ts';
export { relu } from './relu.d.ts';
export { relu6 } from './relu6.d.ts';
export { reshape } from './reshape.d.ts';
export { reverse } from './reverse.d.ts';
export { reverse1d } from './reverse_1d.d.ts';
export { reverse2d } from './reverse_2d.d.ts';
export { reverse3d } from './reverse_3d.d.ts';
export { reverse4d } from './reverse_4d.d.ts';
export { round } from './round.d.ts';
export { rsqrt } from './rsqrt.d.ts';
export { scalar } from './scalar.d.ts';
export { selu } from './selu.d.ts';
export { separableConv2d } from './separable_conv2d.d.ts';
export { setdiff1dAsync } from './setdiff1d_async.d.ts';
export { sigmoid } from './sigmoid.d.ts';
export { sign } from './sign.d.ts';
export { sin } from './sin.d.ts';
export { sinh } from './sinh.d.ts';
export { slice } from './slice.d.ts';
export { slice1d } from './slice1d.d.ts';
export { slice2d } from './slice2d.d.ts';
export { slice3d } from './slice3d.d.ts';
export { slice4d } from './slice4d.d.ts';
export { softmax } from './softmax.d.ts';
export { softplus } from './softplus.d.ts';
export { spaceToBatchND } from './space_to_batch_nd.d.ts';
export { fft } from './spectral/fft.d.ts';
export { ifft } from './spectral/ifft.d.ts';
export { irfft } from './spectral/irfft.d.ts';
export { rfft } from './spectral/rfft.d.ts';
export { split } from './split.d.ts';
export { sqrt } from './sqrt.d.ts';
export { square } from './square.d.ts';
export { squaredDifference } from './squared_difference.d.ts';
export { squeeze } from './squeeze.d.ts';
export { stack } from './stack.d.ts';
export { step } from './step.d.ts';
export { stridedSlice } from './strided_slice.d.ts';
export { sub } from './sub.d.ts';
export { sum } from './sum.d.ts';
export { tan } from './tan.d.ts';
export { tanh } from './tanh.d.ts';
export { tensor } from './tensor.d.ts';
export { tensor1d } from './tensor1d.d.ts';
export { tensor2d } from './tensor2d.d.ts';
export { tensor3d } from './tensor3d.d.ts';
export { tensor4d } from './tensor4d.d.ts';
export { tensor5d } from './tensor5d.d.ts';
export { tensor6d } from './tensor6d.d.ts';
export { tensorScatterUpdate } from './tensor_scatter_update.d.ts';
export { tile } from './tile.d.ts';
export { topk } from './topk.d.ts';
export { truncatedNormal } from './truncated_normal.d.ts';
export { unique } from './unique.d.ts';
export { unsortedSegmentSum } from './unsorted_segment_sum.d.ts';
export { unstack } from './unstack.d.ts';
export { upperBound } from './upper_bound.d.ts';
export { variable } from './variable.d.ts';
export { where } from './where.d.ts';
export { whereAsync } from './where_async.d.ts';
export { zeros } from './zeros.d.ts';
export { zerosLike } from './zeros_like.d.ts';
export * from './boolean_mask.d.ts';
export * from './transpose.d.ts';
export * from './norm.d.ts';
export * from './moving_average.d.ts';
export * from './scatter_nd.d.ts';
export * from './search_sorted.d.ts';
export * from './sparse_to_dense.d.ts';
export * from './gather_nd.d.ts';
export * from './dropout.d.ts';
export * from './signal_ops_util.d.ts';
export * from './in_top_k.d.ts';
export { op, OP_SCOPE_SUFFIX } from './operation.d.ts';
declare const spectral: {
    fft: (input: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
    ifft: (input: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
    rfft: (input: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, fftLength?: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
    irfft: (input: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
};
import * as fused from './fused_ops.d.ts';
declare const signal: {
    hammingWindow: (windowLength: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D;
    hannWindow: (windowLength: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D;
    frame: (signal: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, frameLength: number, frameStep: number, padEnd?: boolean, padValue?: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
    stft: (signal: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, frameLength: number, frameStep: number, fftLength?: number, windowFn?: (length: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
};
declare const image: {
    flipLeftRight: (image: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D;
    grayscaleToRGB: <T extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor3D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor5D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor6D>(image: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T) => T;
    resizeNearestNeighbor: <T_1 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor3D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D>(images: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_1, size: [number, number], alignCorners?: boolean, halfPixelCenters?: boolean) => T_1;
    resizeBilinear: <T_2 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor3D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D>(images: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_2, size: [number, number], alignCorners?: boolean, halfPixelCenters?: boolean) => T_2;
    rgbToGrayscale: <T_3 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor3D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor5D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor6D>(image: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_3) => T_3;
    rotateWithOffset: (image: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D, radians: number, fillValue?: number | [number, number, number], center?: number | [number, number]) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D;
    cropAndResize: (image: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D, boxes: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, boxInd: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, cropSize: [number, number], method?: "bilinear" | "nearest", extrapolationValue?: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D;
    nonMaxSuppression: (boxes: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, scores: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D;
    nonMaxSuppressionAsync: (boxes: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, scores: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number) => Promise<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D>;
    nonMaxSuppressionWithScore: (boxes: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, scores: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number, softNmsSigma?: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor_types.d.ts").NamedTensorMap;
    nonMaxSuppressionWithScoreAsync: (boxes: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, scores: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number, softNmsSigma?: number) => Promise<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor_types.d.ts").NamedTensorMap>;
    nonMaxSuppressionPadded: (boxes: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, scores: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number, padToMaxOutputSize?: boolean) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor_types.d.ts").NamedTensorMap;
    nonMaxSuppressionPaddedAsync: (boxes: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, scores: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number, padToMaxOutputSize?: boolean) => Promise<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor_types.d.ts").NamedTensorMap>;
    threshold: (image: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor3D, method?: string, inverted?: boolean, threshValue?: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor3D;
    transform: (image: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D, transforms: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, interpolation?: "bilinear" | "nearest", fillMode?: "reflect" | "nearest" | "constant" | "wrap", fillValue?: number, outputShape?: [number, number]) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor4D;
};
declare const linalg: {
    bandPart: <T extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(a: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T, numLower: number | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Scalar, numUpper: number | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Scalar) => T;
    gramSchmidt: (xs: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D[]) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D[];
    qr: (x: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, fullMatrices?: boolean) => [import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>];
};
declare const losses: {
    absoluteDifference: <T extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(labels: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T, predictions: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O;
    computeWeightedLoss: <T_1 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O_1 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(losses: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_1, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O_1;
    cosineDistance: <T_2 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O_2 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(labels: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_2, predictions: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_2, axis: number, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O_2;
    hingeLoss: <T_3 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O_3 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(labels: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_3, predictions: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_3, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O_3;
    huberLoss: <T_4 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O_4 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(labels: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_4, predictions: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_4, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, delta?: number, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O_4;
    logLoss: <T_5 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O_5 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(labels: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_5, predictions: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_5, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, epsilon?: number, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O_5;
    meanSquaredError: <T_6 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O_6 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(labels: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_6, predictions: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_6, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O_6;
    sigmoidCrossEntropy: <T_7 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O_7 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(multiClassLabels: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_7, logits: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_7, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, labelSmoothing?: number, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O_7;
    softmaxCrossEntropy: <T_8 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, O_8 extends import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>>(onehotLabels: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_8, logits: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | T_8, weights?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, labelSmoothing?: number, reduction?: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/base.d.ts").Reduction) => O_8;
};
declare const sparse: {
    sparseFillEmptyRows: (indices: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, values: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, denseShape: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, defaultValue: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").ScalarLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Scalar) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor_types.d.ts").NamedTensorMap;
    sparseReshape: (inputIndices: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor2D, inputShape: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, newShape: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor_types.d.ts").NamedTensorMap;
    sparseSegmentMean: (data: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, indices: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, segmentIds: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
    sparseSegmentSum: (data: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, indices: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, segmentIds: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
};
declare const string: {
    stringNGrams: (data: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, dataSplits: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, separator: string, nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number, preserveShortSequences: boolean) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor_types.d.ts").NamedTensorMap;
    stringSplit: (input: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor1D, delimiter: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").ScalarLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Scalar, skipEmpty?: boolean) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor_types.d.ts").NamedTensorMap;
    stringToHashBucketFast: (input: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, numBuckets: number) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
    staticRegexReplace: (input: import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").TensorLike | import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>, pattern: string, rewrite: string, replaceGlobal?: boolean) => import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/tensor.d.ts").Tensor<import("https://esm.sh/v135/@tensorflow/tfjs-core@4.15.0/dist/types.d.ts").Rank>;
};
export { image, linalg, losses, spectral, fused, signal, sparse, string };
