/* esm.sh - esbuild bundle(@tensorflow/tfjs-core@4.15.0/dist/ops/browser) denonext production */
import{ENGINE as y}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/engine.js";import{env as A}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/environment.js";import{Draw as P,FromPixels as I}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/kernel_names.js";import{getKernel as E}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/kernel_registry.js";import{Tensor as T}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/tensor.js";import{convertToTensor as b}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/tensor_util_env.js";import{cast as D}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/ops/cast.js";import{op as B}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/ops/operation.js";import{tensor3d as C}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/ops/tensor3d.js";var h,v=!1;function k(e,n=3){if(n>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(e==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let t=!1,r=!1,i=!1,d=!1,u=!1,c=!1;if(e.data instanceof Uint8Array)t=!0;else if(typeof ImageData<"u"&&e instanceof ImageData)r=!0;else if(typeof HTMLVideoElement<"u"&&e instanceof HTMLVideoElement)i=!0;else if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement)d=!0;else if(e.getContext!=null)u=!0;else if(typeof ImageBitmap<"u"&&e instanceof ImageBitmap)c=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);if(E(I,y.backendName)!=null){let p={pixels:e},w={numChannels:n};return y.runKernel(I,p,w)}let[a,o]=i?[e.videoWidth,e.videoHeight]:[e.width,e.height],s;if(u)s=e.getContext("2d").getImageData(0,0,a,o).data;else if(r||t)s=e.data;else if(d||i||c){if(h==null)if(typeof document>"u")if(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u")h=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else h=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});h.canvas.width=a,h.canvas.height=o,h.drawImage(e,0,0,a,o),s=h.getImageData(0,0,a,o).data}let l;if(n===4)l=new Int32Array(s);else{let p=a*o;l=new Int32Array(p*n);for(let w=0;w<p;w++)for(let g=0;g<n;++g)l[w*n+g]=s[w*4+g]}return C(l,[o,a,n],"int32")}function x(e){return e!=null&&e.data instanceof Uint8Array}function $(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}function H(e){return e!=null&&e.width!==0&&e.height!==0}function L(e){return $()&&!(e instanceof ImageBitmap)&&H(e)&&!x(e)}async function G(e,n=3){let t=null;if(A().getBool("WRAP_TO_IMAGEBITMAP")&&L(e)){let r;try{r=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch{r=null}r!=null&&r.width===e.width&&r.height===e.height?t=r:t=e}else t=e;return k(t,n)}function M(e){if(e.rank!==2&&e.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let n=e.rank===2?1:e.shape[2];if(n>4||n===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${n}`);if(e.dtype!=="float32"&&e.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}function O(e){let n=e?.alpha||1;if(n>1||n<0)throw new Error(`Alpha value ${n} is suppoed to be in range [0 - 1].`)}async function j(e,n){let t=b(e,"img","toPixels");if(!(e instanceof T)){let a=t;t=D(a,"int32"),a.dispose()}M(t);let[r,i]=t.shape.slice(0,2),d=t.rank===2?1:t.shape[2],u=await t.data(),c=t.dtype==="float32"?255:1,m=new Uint8ClampedArray(i*r*4);for(let a=0;a<r*i;++a){let o=[0,0,0,255];for(let l=0;l<d;l++){let f=u[a*d+l];if(t.dtype==="float32"){if(f<0||f>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${f}.`)}else if(t.dtype==="int32"&&(f<0||f>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${f}.`);d===1?(o[0]=f*c,o[1]=f*c,o[2]=f*c):o[l]=f*c}let s=a*4;m[s+0]=Math.round(o[0]),m[s+1]=Math.round(o[1]),m[s+2]=Math.round(o[2]),m[s+3]=Math.round(o[3])}if(n!=null){v||E(P,y.backendName)!=null&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),v=!0),n.width=i,n.height=r;let a=n.getContext("2d"),o=new ImageData(m,i,r);a.putImageData(o,0,0)}return t!==e&&t.dispose(),m}function q(e,n,t){let r=b(e,"img","draw");if(!(e instanceof T)){let u=r;r=D(u,"int32"),u.dispose()}M(r),O(t?.imageOptions);let i={image:r},d={canvas:n,options:t};y.runKernel(P,i,d)}var z=B({fromPixels_:k});export{q as draw,z as fromPixels,G as fromPixelsAsync,j as toPixels};
/*! Bundled license information:

@tensorflow/tfjs-core/dist/ops/browser.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)
*/
//# sourceMappingURL=browser.js.map