/* esm.sh - esbuild bundle(@tensorflow/tfjs-core@4.15.0/dist/io/local_storage) denonext production */
import"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/flags.js";import{env as u}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/environment.js";import{assert as h}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/util.js";import{arrayBufferToBase64String as I,base64StringToArrayBuffer as E,getModelArtifactsInfoForJSON as L}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/io/io_utils.js";import{CompositeArrayBuffer as B}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/io/composite_array_buffer.js";import{IORouterRegistry as c}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/io/router_registry.js";var a="/",d="tensorflowjs_models",S="info",O="model_topology",_="weight_specs",M="weight_data",v="model_metadata";function b(){if(!u().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("purgeLocalStorageModels() cannot proceed because local storage is unavailable in the current environment.");let t=window.localStorage,e=[];for(let o=0;o<t.length;++o){let i=t.key(o),n=d+a;if(i.startsWith(n)&&i.length>n.length){t.removeItem(i);let s=w(i);e.indexOf(s)===-1&&e.push(s)}}return e}function y(t){return{info:[d,t,S].join(a),topology:[d,t,O].join(a),weightSpecs:[d,t,_].join(a),weightData:[d,t,M].join(a),modelMetadata:[d,t,v].join(a)}}function m(t){for(let e of Object.values(t))window.localStorage.removeItem(e)}function w(t){let e=t.split(a);if(e.length<3)throw new Error(`Invalid key format: ${t}`);return e.slice(1,e.length-1).join(a)}function R(t){return t.startsWith(l.URL_SCHEME)?t.slice(l.URL_SCHEME.length):t}var l=class{constructor(e){if(!u().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,e==null||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=y(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let o=JSON.stringify(e.modelTopology),i=JSON.stringify(e.weightSpecs),n=L(e),s=B.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,o),this.LS.setItem(this.keys.weightSpecs,i),this.LS.setItem(this.keys.weightData,I(s));let g={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:e.signature!=null?e.signature:void 0,userDefinedMetadata:e.userDefinedMetadata!=null?e.userDefinedMetadata:void 0,modelInitializer:e.modelInitializer!=null?e.modelInitializer:void 0,initializerSignature:e.initializerSignature!=null?e.initializerSignature:void 0,trainingConfig:e.trainingConfig!=null?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(g)),{modelArtifactsInfo:n}}catch{throw m(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(e==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(e.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let o={},i=JSON.parse(this.LS.getItem(this.keys.topology));if(i==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);o.modelTopology=i;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);o.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let r=JSON.parse(s);o.format=r.format,o.generatedBy=r.generatedBy,o.convertedBy=r.convertedBy,r.signature!=null&&(o.signature=r.signature),r.userDefinedMetadata!=null&&(o.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(o.modelInitializer=r.modelInitializer),r.initializerSignature!=null&&(o.initializerSignature=r.initializerSignature),r.trainingConfig!=null&&(o.trainingConfig=r.trainingConfig)}let g=this.LS.getItem(this.keys.weightData);if(g==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return o.weightData=E(g),o}};l.URL_SCHEME="localstorage://";var p=t=>u().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(l.URL_SCHEME)?T(t.slice(l.URL_SCHEME.length)):null;c.registerSaveRouter(p);c.registerLoadRouter(p);function T(t){return new l(t)}var f=class{constructor(){h(u().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),h(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let e={},o=d+a,i=a+S;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(o)&&s.endsWith(i)){let g=w(s);e[g]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){e=R(e);let o=y(e);if(this.LS.getItem(o.info)==null)throw new Error(`Cannot find model at path '${e}'`);let i=JSON.parse(this.LS.getItem(o.info));return m(o),i}};export{l as BrowserLocalStorage,f as BrowserLocalStorageManager,T as browserLocalStorage,p as localStorageRouter,b as purgeLocalStorageArtifacts};
/*! Bundled license information:

@tensorflow/tfjs-core/dist/io/local_storage.js:
  (**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)
*/
//# sourceMappingURL=local_storage.js.map