/* esm.sh - esbuild bundle(@tensorflow/tfjs-core@4.15.0/dist/io/http) denonext production */
import{env as d}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/environment.js";import{assert as a}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/util.js";import{getModelArtifactsForJSON as y,getModelArtifactsInfoForJSON as S,getModelJSONForModelArtifacts as T,getWeightSpecs as c}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/io/io_utils.js";import{CompositeArrayBuffer as b}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/io/composite_array_buffer.js";import{IORouterRegistry as p}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/io/router_registry.js";import{loadWeightsAsArrayBuffer as v,streamWeights as P}from"/v135/@tensorflow/tfjs-core@4.15.0/denonext/dist/io/weights_loader.js";var E="application/octet-stream",M="application/json",h=class{constructor(t,e){if(this.DEFAULT_METHOD="POST",e==null&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.weightUrlConverter=e.weightUrlConverter,e.fetchFunc!=null?(a(typeof e.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=d().platform.fetch,a(t!=null&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&a(t.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,e.requestInit!=null&&e.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{},this.loadOptions=e}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r=T(t,o);if(e.body.append("model.json",new Blob([JSON.stringify(r)],{type:M}),"model.json"),t.weightData!=null){let i=b.join(t.weightData);e.body.append("model.weights.bin",new Blob([i],{type:E}),"model.weights.bin")}let n=await this.fetch(this.path,e);if(n.ok)return{modelArtifactsInfo:S(t),responses:[n]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${n.status}.`)}async loadModelJSON(){let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch{let i=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?i+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":i+=" Please make sure the server is serving valid JSON for this request.",new Error(i)}let o=e.modelTopology,r=e.weightsManifest;if(o==null&&r==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return e}async load(){if(this.loadOptions.streamWeights)return this.loadStream();let t=await this.loadModelJSON();return y(t,e=>this.loadWeights(e))}async loadStream(){let t=await this.loadModelJSON(),e=await this.getWeightUrls(t.weightsManifest),o=c(t.weightsManifest),r=()=>P(e,this.loadOptions);return Object.assign(Object.assign({},t),{weightSpecs:o,getWeightStream:r})}async getWeightUrls(t){let e=Array.isArray(this.path)?this.path[1]:this.path,[o,r]=R(e),n=this.weightPathPrefix||o,i=[],l=[];for(let m of t)for(let f of m.paths)this.weightUrlConverter!=null?l.push(this.weightUrlConverter(f)):i.push(n+f+r);return this.weightUrlConverter&&i.push(...await Promise.all(l)),i}async loadWeights(t){let e=await this.getWeightUrls(t),o=c(t),r=await v(e,this.loadOptions);return[o,r]}};h.URL_SCHEME_REGEX=/^https?:\/\//;function R(s){let t=s.lastIndexOf("/"),e=s.lastIndexOf("?"),o=s.substring(0,t),r=e>t?s.substring(e):"";return[o+"/",r]}function u(s){return s.match(h.URL_SCHEME_REGEX)!=null}var g=(s,t)=>{if(typeof fetch>"u"&&(t==null||t.fetchFunc==null))return null;{let e=!0;if(Array.isArray(s)?e=s.every(o=>u(o)):e=u(s),e)return w(s,t)}return null};p.registerSaveRouter(g);p.registerLoadRouter(g);function w(s,t){return new h(s,t)}function I(s,t){return w(s,t)}export{h as HTTPRequest,I as browserHTTPRequest,w as http,g as httpRouter,u as isHTTPScheme,R as parseUrl};
/*! Bundled license information:

@tensorflow/tfjs-core/dist/io/http.js:
  (**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)
*/
//# sourceMappingURL=http.js.map