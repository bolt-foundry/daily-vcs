/* esm.sh - esbuild bundle(langchain@0.0.92/dist/prompts/prompt) denonext production */
var c=class{constructor(e){Object.defineProperty(this,"text",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.text=e}toJSON(){return{type:this._getType(),data:{content:this.text,role:"role"in this?this.role:void 0}}}},o=class extends c{_getType(){return"human"}};var p=class{};var m=class extends p{constructor(e){super(),Object.defineProperty(this,"value",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.value=e}toString(){return this.value}toChatMessages(){return[new o(this.value)]}},b=class{constructor(e){Object.defineProperty(this,"inputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"outputParser",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"partialVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0});let{inputVariables:t}=e;if(t.includes("stop"))throw new Error("Cannot have an input variable named 'stop', as it is used internally, please rename.");Object.assign(this,e)}async mergePartialAndUserVariables(e){let t=this.partialVariables??{},i={};for(let[s,n]of Object.entries(t))typeof n=="string"?i[s]=n:i[s]=await n();return{...i,...e}}static async deserialize(e){switch(e._type){case"prompt":{let{PromptTemplate:t}=await import("/v135/langchain@0.0.92/denonext/dist/prompts/prompt.js");return t.deserialize(e)}case void 0:{let{PromptTemplate:t}=await import("/v135/langchain@0.0.92/denonext/dist/prompts/prompt.js");return t.deserialize({...e,_type:"prompt"})}case"few_shot":{let{FewShotPromptTemplate:t}=await import("/v135/langchain@0.0.92/denonext/dist/prompts/few_shot.js");return t.deserialize(e)}default:throw new Error(`Invalid prompt type in config: ${e._type}`)}}},u=class extends b{async formatPromptValue(e){let t=await this.format(e);return new m(t)}};var d=a=>{let e=a.split(""),t=[],i=(s,n)=>{for(let l=n;l<e.length;l+=1)if(s.includes(e[l]))return l;return-1},r=0;for(;r<e.length;)if(e[r]==="{"&&r+1<e.length&&e[r+1]==="{")t.push({type:"literal",text:"{"}),r+=2;else if(e[r]==="}"&&r+1<e.length&&e[r+1]==="}")t.push({type:"literal",text:"}"}),r+=2;else if(e[r]==="{"){let s=i("}",r);if(s<0)throw new Error("Unclosed '{' in template.");t.push({type:"variable",name:e.slice(r+1,s).join("")}),r=s+1}else{if(e[r]==="}")throw new Error("Single '}' in template.");{let s=i("{}",r),n=(s<0?e.slice(r):e.slice(r,s)).join("");t.push({type:"literal",text:n}),r=s<0?e.length:s}}return t},g=(a,e)=>d(a).reduce((t,i)=>{if(i.type==="variable"){if(i.name in e)return t+e[i.name];throw new Error(`Missing value for input ${i.name}`)}return t+i.text},""),h={"f-string":g,jinja2:(a,e)=>""},v={"f-string":d,jinja2:a=>[]},f=(a,e,t)=>h[e](a,t),w=(a,e)=>v[e](a),x=(a,e,t)=>{if(!(e in h)){let i=Object.keys(h);throw new Error(`Invalid template format. Got \`${e}\`;
                         should be one of ${i}`)}try{let i=t.reduce((r,s)=>(r[s]="foo",r),{});f(a,e,i)}catch{throw new Error("Invalid prompt schema.")}};var y=class a extends u{constructor(e){if(super(e),Object.defineProperty(this,"template",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"templateFormat",{enumerable:!0,configurable:!0,writable:!0,value:"f-string"}),Object.defineProperty(this,"validateTemplate",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e),this.validateTemplate){let t=this.inputVariables;this.partialVariables&&(t=t.concat(Object.keys(this.partialVariables))),x(this.template,this.templateFormat,t)}}_getPromptType(){return"prompt"}async format(e){let t=await this.mergePartialAndUserVariables(e);return f(this.template,this.templateFormat,t)}static fromExamples(e,t,i,r=`

`,s=""){let n=[s,...e,t].join(r);return new a({inputVariables:i,template:n})}static fromTemplate(e,{templateFormat:t="f-string",...i}={}){let r=new Set;return w(e,t).forEach(s=>{s.type==="variable"&&r.add(s.name)}),new a({inputVariables:[...r],templateFormat:t,template:e,...i})}async partial(e){let t={...this};return t.inputVariables=this.inputVariables.filter(i=>!(i in e)),t.partialVariables={...this.partialVariables??{},...e},new a(t)}serialize(){if(this.outputParser!==void 0)throw new Error("Cannot serialize a prompt template with an output parser");return{_type:this._getPromptType(),input_variables:this.inputVariables,template:this.template,template_format:this.templateFormat}}static async deserialize(e){if(!e.template)throw new Error("Prompt template must have a template");return new a({inputVariables:e.input_variables,template:e.template,templateFormat:e.template_format})}};export{y as PromptTemplate};
//# sourceMappingURL=prompt.js.map