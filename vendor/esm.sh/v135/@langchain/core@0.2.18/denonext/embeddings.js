/* esm.sh - esbuild bundle(@langchain/core@0.2.18/embeddings) denonext production */
import s from"/v135/p-retry@4.6.2/denonext/p-retry.mjs";import u from"/v135/p-queue@6.6.2/denonext/p-queue.mjs";var c=[400,401,402,403,404,405,406,407,409],l=t=>{if(t.message.startsWith("Cancel")||t.message.startsWith("AbortError")||t.name==="AbortError"||t?.code==="ECONNABORTED")throw t;let e=t?.response?.status??t?.status;if(e&&c.includes(+e))throw t;if(t?.error?.code==="insufficient_quota"){let r=new Error(t?.message);throw r.name="InsufficientQuotaError",r}},n=class{constructor(e){Object.defineProperty(this,"maxConcurrency",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"maxRetries",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onFailedAttempt",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"queue",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.maxConcurrency=e.maxConcurrency??1/0,this.maxRetries=e.maxRetries??6,this.onFailedAttempt=e.onFailedAttempt??l;let r="default"in u?u.default:u;this.queue=new r({concurrency:this.maxConcurrency})}call(e,...r){return this.queue.add(()=>s(()=>e(...r).catch(i=>{throw i instanceof Error?i:new Error(i)}),{onFailedAttempt:this.onFailedAttempt,retries:this.maxRetries,randomize:!0}),{throwOnTimeout:!0})}callWithOptions(e,r,...i){return e.signal?Promise.race([this.call(r,...i),new Promise((m,a)=>{e.signal?.addEventListener("abort",()=>{a(new Error("AbortError"))})})]):this.call(r,...i)}fetch(...e){return this.call(()=>fetch(...e).then(r=>r.ok?r:Promise.reject(r)))}};var o=class{constructor(e){Object.defineProperty(this,"caller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.caller=new n(e??{})}};export{o as Embeddings};
//# sourceMappingURL=embeddings.js.map