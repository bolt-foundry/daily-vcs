/* esm.sh - esbuild bundle(micromark-extension-mdxjs-esm@3.0.0) denonext production */
import{blankLine as I}from"/v135/micromark-core-commonmark@2.0.0/denonext/micromark-core-commonmark.mjs";import{asciiAlpha as v,markdownLineEnding as j}from"/v135/micromark-util-character@2.0.1/denonext/micromark-util-character.mjs";import{eventsToAcorn as z}from"/v135/micromark-util-events-to-acorn@2.0.2/denonext/micromark-util-events-to-acorn.mjs";import{positionFromEstree as A}from"/v135/unist-util-position-from-estree@2.0.0/denonext/unist-util-position-from-estree.mjs";import{VFileMessage as k}from"/v135/vfile-message@4.0.2/denonext/vfile-message.mjs";var B={tokenize:T,partial:!0},y="https://github.com/micromark/micromark-extension-mdxjs-esm",M=new Set(["ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ImportDeclaration"]);function O(n){let a={tokenize:c,concrete:!0};if(!n||!n.acorn||!n.acorn.parse)throw new Error("Expected an `acorn` instance passed in as `options.acorn`");let m=n.acorn,p=Object.assign({ecmaVersion:2024,sourceType:"module"},n.acornOptions,{locations:!0});return{flow:{101:a,105:a}};function c(e,b,d){let i=this,l=i.parser.definedModuleSpecifiers||(i.parser.definedModuleSpecifiers=[]),D=this.events.length+1,u="";return i.interrupt?d:S;function S(r){return i.now().column>1?d(r):(e.enter("mdxjsEsm"),e.enter("mdxjsEsmData"),e.consume(r),u+=String.fromCharCode(r),h)}function h(r){return v(r)?(e.consume(r),u+=String.fromCharCode(r),h):(u==="import"||u==="export")&&r===32?(e.consume(r),x):d(r)}function x(r){return r===null||j(r)?(e.exit("mdxjsEsmData"),E(r)):(e.consume(r),x)}function E(r){return r===null?w(r):j(r)?e.check(B,w,f)(r):(e.enter("mdxjsEsmData"),x(r))}function f(r){return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),E}function w(r){let t=z(i.events.slice(D),{acorn:m,acornOptions:p,tokenTypes:["mdxjsEsmData"],prefix:l.length>0?"var "+l.join(",")+`
`:""});if(t.error){if(r!==null&&t.swallow)return f(r);let o=new k("Could not parse import/exports with acorn",{cause:t.error,place:{line:t.error.loc.line,column:t.error.loc.column+1,offset:t.error.pos},ruleId:"acorn",source:"micromark-extension-mdxjs-esm"});throw o.url=y+"#could-not-parse-importexports-with-acorn",o}if(l.length>0){let o=t.estree.body.shift()}let g=-1;for(;++g<t.estree.body.length;){let o=t.estree.body[g];if(!M.has(o.type)){let s=new k("Unexpected `"+o.type+"` in code: only import/exports are supported",{place:A(o),ruleId:"non-esm",source:"micromark-extension-mdxjs-esm"});throw s.url=y+"#unexpected-type-in-code-only-importexports-are-supported",s}if(o.type==="ImportDeclaration"&&!i.interrupt){let s=-1;for(;++s<o.specifiers.length;){let C=o.specifiers[s];l.push(C.local.name)}}}return Object.assign(e.exit("mdxjsEsm"),n.addResult?{estree:t.estree}:void 0),b(r)}}}function T(n,a,m){return p;function p(c){return n.enter("lineEndingBlank"),n.consume(c),n.exit("lineEndingBlank"),n.attempt(I,a,m)}}export{O as mdxjsEsm};
//# sourceMappingURL=micromark-extension-mdxjs-esm.mjs.map