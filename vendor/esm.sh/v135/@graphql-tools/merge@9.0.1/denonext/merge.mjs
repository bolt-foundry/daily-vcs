/* esm.sh - esbuild bundle(@graphql-tools/merge@9.0.1) denonext production */
import{mergeDeep as q}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";function z(e,t){if(!e||Array.isArray(e)&&e.length===0)return{};if(!Array.isArray(e))return e;if(e.length===1)return e[0]||{};let r=new Array;for(let i of e)Array.isArray(i)&&(i=z(i)),typeof i=="object"&&i&&r.push(i);let n=q(r,!0);if(t?.exclusions)for(let i of t.exclusions){let[o,s]=i.split(".");!s||s==="*"?delete n[o]:n[o]&&delete n[o][s]}return n}import{compareNodes as Z,isSome as ee}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";function M(e,t,r){let n=te([...t,...e].filter(ee),r);return r&&r.sort&&n.sort(Z),n}function te(e,t){return e.reduce((r,n)=>{let i=r.findIndex(o=>o.name.value===n.name.value);return i===-1?r.concat([n]):(t?.reverseArguments||(r[i]=n),r)},[])}import{print as R}from"/v135/graphql@16.8.1/denonext/graphql.mjs";import{isSome as re}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";function ne(e,t){return!!e.find(r=>r.name.value===t.name.value)}function Y(e,t){return!!t?.[e.name.value]?.repeatable}function ie(e,t){return t.some(({value:r})=>r===e.value)}function b(e,t){let r=[...t];for(let n of e){let i=r.findIndex(o=>o.name.value===n.name.value);if(i>-1){let o=r[i];if(o.value.kind==="ListValue"){let s=o.value.values,a=n.value.values;o.value.values=ae(s,a,(m,p)=>{let d=m.value;return!d||!p.some(T=>T.value===d)})}else o.value=n.value}else r.push(n)}return r}function oe(e,t){return e.map((r,n,i)=>{let o=i.findIndex(s=>s.name.value===r.name.value);if(o!==n&&!Y(r,t)){let s=i[o];return r.arguments=b(r.arguments,s.arguments),null}return r}).filter(re)}function u(e=[],t=[],r,n){let i=r&&r.reverseDirectives,o=i?e:t,s=i?t:e,a=oe([...o],n);for(let m of s)if(ne(a,m)&&!Y(m,n)){let p=a.findIndex(T=>T.name.value===m.name.value),d=a[p];a[p].arguments=b(m.arguments||[],d.arguments||[])}else a.push(m);return a}function se(e,t){let r=R({...e,description:void 0}),n=R({...t,description:void 0}),i=new RegExp("(directive @w*d*)|( on .*$)","g");if(!(r.replace(i,"")===n.replace(i,"")))throw new Error(`Unable to merge GraphQL directive "${e.name.value}". 
Existing directive:  
	${n} 
Received directive: 
	${r}`)}function U(e,t){return t?(se(e,t),{...e,locations:[...t.locations,...e.locations.filter(r=>!ie(r,t.locations))]}):e}function ae(e,t,r){return e.concat(t.filter(n=>r(n,e)))}import{compareNodes as me}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";function $(e,t,r,n){if(r?.consistentEnumMerge){let s=[];e&&s.push(...e),e=t,t=s}let i=new Map;if(e)for(let s of e)i.set(s.name.value,s);if(t)for(let s of t){let a=s.name.value;if(i.has(a)){let m=i.get(a);m.description=s.description||m.description,m.directives=u(s.directives,m.directives,n)}else i.set(a,s)}let o=[...i.values()];return r&&r.sort&&o.sort(me),o}import{Kind as ue}from"/v135/graphql@16.8.1/denonext/graphql.mjs";function w(e,t,r,n){return t?{name:e.name,description:e.description||t.description,kind:r?.convertExtensions||e.kind==="EnumTypeDefinition"||t.kind==="EnumTypeDefinition"?"EnumTypeDefinition":"EnumTypeExtension",loc:e.loc,directives:u(e.directives,t.directives,r,n),values:$(e.values,t.values,r)}:r?.convertExtensions?{...e,kind:ue.ENUM_TYPE_DEFINITION}:e}import{compareNodes as fe}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";import{Kind as x,Source as pe}from"/v135/graphql@16.8.1/denonext/graphql.mjs";function B(e){return typeof e=="string"}function H(e){return e instanceof pe}function g(e){let t=e;for(;t.kind===x.LIST_TYPE||t.kind==="NonNullType";)t=t.type;return t}function P(e){return e.kind!==x.NAMED_TYPE}function h(e){return e.kind===x.LIST_TYPE}function E(e){return e.kind===x.NON_NULL_TYPE}function A(e){return h(e)?`[${A(e.type)}]`:E(e)?`${A(e.type)}!`:e.name.value}var l;(function(e){e[e.A_SMALLER_THAN_B=-1]="A_SMALLER_THAN_B",e[e.A_EQUALS_B=0]="A_EQUALS_B",e[e.A_GREATER_THAN_B=1]="A_GREATER_THAN_B"})(l||(l={}));function j(e,t){return e==null&&t==null?l.A_EQUALS_B:e==null?l.A_SMALLER_THAN_B:t==null?l.A_GREATER_THAN_B:e<t?l.A_SMALLER_THAN_B:e>t?l.A_GREATER_THAN_B:l.A_EQUALS_B}function ce(e,t){let r=e.findIndex(n=>n.name.value===t.name.value);return[r>-1?e[r]:null,r]}function I(e,t,r,n,i){let o=[];if(r!=null&&o.push(...r),t!=null)for(let s of t){let[a,m]=ce(o,s);if(a&&!n?.ignoreFieldConflicts){let p=n?.onFieldTypeConflict&&n.onFieldTypeConflict(a,s,e,n?.throwOnConflict)||le(e,a,s,n?.throwOnConflict);p.arguments=M(s.arguments||[],a.arguments||[],n),p.directives=u(s.directives,a.directives,n,i),p.description=s.description||a.description,o[m]=p}else o.push(s)}if(n&&n.sort&&o.sort(fe),n&&n.exclusions){let s=n.exclusions;return o.filter(a=>!s.includes(`${e.name.value}.${a.name.value}`))}return o}function le(e,t,r,n=!1){let i=A(t.type),o=A(r.type);if(i!==o){let s=g(t.type),a=g(r.type);if(s.name.value!==a.name.value)throw new Error(`Field "${r.name.value}" already defined with a different type. Declared as "${s.name.value}", but you tried to override with "${a.name.value}"`);if(!D(t.type,r.type,!n))throw new Error(`Field '${e.name.value}.${t.name.value}' changed type from '${i}' to '${o}'`)}return E(r.type)&&!E(t.type)&&(t.type=r.type),t}function D(e,t,r=!1){if(!P(e)&&!P(t))return e.toString()===t.toString();if(E(t)){let n=E(e)?e.type:e;return D(n,t.type)}return E(e)?D(t,e,r):h(e)?h(t)&&D(e.type,t.type)||E(t)&&D(e,t.type):!1}import{Kind as Ee}from"/v135/graphql@16.8.1/denonext/graphql.mjs";function Q(e,t,r,n){if(t)try{return{name:e.name,description:e.description||t.description,kind:r?.convertExtensions||e.kind==="InputObjectTypeDefinition"||t.kind==="InputObjectTypeDefinition"?"InputObjectTypeDefinition":"InputObjectTypeExtension",loc:e.loc,fields:I(e,e.fields,t.fields,r),directives:u(e.directives,t.directives,r,n)}}catch(i){throw new Error(`Unable to merge GraphQL input type "${e.name.value}": ${i.message}`)}return r?.convertExtensions?{...e,kind:Ee.INPUT_OBJECT_TYPE_DEFINITION}:e}import{Kind as Ne}from"/v135/graphql@16.8.1/denonext/graphql.mjs";import{compareNodes as de}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";function Te(e,t){return!!e.find(r=>r.name.value===t.name.value)}function v(e=[],t=[],r={}){let n=[...t,...e.filter(i=>!Te(t,i))];return r&&r.sort&&n.sort(de),n}function G(e,t,r,n){if(t)try{return{name:e.name,description:e.description||t.description,kind:r?.convertExtensions||e.kind==="InterfaceTypeDefinition"||t.kind==="InterfaceTypeDefinition"?"InterfaceTypeDefinition":"InterfaceTypeExtension",loc:e.loc,fields:I(e,e.fields,t.fields,r),directives:u(e.directives,t.directives,r,n),interfaces:e.interfaces?v(e.interfaces,t.interfaces,r):void 0}}catch(i){throw new Error(`Unable to merge GraphQL interface "${e.name.value}": ${i.message}`)}return r?.convertExtensions?{...e,kind:Ne.INTERFACE_TYPE_DEFINITION}:e}import{Kind as f}from"/v135/graphql@16.8.1/denonext/graphql.mjs";import{collectComment as ye}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";import{Kind as Ie}from"/v135/graphql@16.8.1/denonext/graphql.mjs";function K(e,t,r,n){return t?{name:e.name,description:e.description||t.description,kind:r?.convertExtensions||e.kind==="ScalarTypeDefinition"||t.kind==="ScalarTypeDefinition"?"ScalarTypeDefinition":"ScalarTypeExtension",loc:e.loc,directives:u(e.directives,t.directives,r,n)}:r?.convertExtensions?{...e,kind:Ie.SCALAR_TYPE_DEFINITION}:e}import{Kind as O}from"/v135/graphql@16.8.1/denonext/graphql.mjs";var k={query:"Query",mutation:"Mutation",subscription:"Subscription"};function ve(e=[],t=[]){let r=[];for(let n in k){let i=e.find(o=>o.operation===n)||t.find(o=>o.operation===n);i&&r.push(i)}return r}function X(e,t,r,n){return t?{kind:e.kind===O.SCHEMA_DEFINITION||t.kind===O.SCHEMA_DEFINITION?O.SCHEMA_DEFINITION:O.SCHEMA_EXTENSION,description:e.description||t.description,directives:u(e.directives,t.directives,r,n),operationTypes:ve(e.operationTypes,t.operationTypes)}:r?.convertExtensions?{...e,kind:O.SCHEMA_DEFINITION}:e}import{Kind as _e}from"/v135/graphql@16.8.1/denonext/graphql.mjs";function V(e,t,r,n){if(t)try{return{name:e.name,description:e.description||t.description,kind:r?.convertExtensions||e.kind==="ObjectTypeDefinition"||t.kind==="ObjectTypeDefinition"?"ObjectTypeDefinition":"ObjectTypeExtension",loc:e.loc,fields:I(e,e.fields,t.fields,r),directives:u(e.directives,t.directives,r,n),interfaces:v(e.interfaces,t.interfaces,r)}}catch(i){throw new Error(`Unable to merge GraphQL type "${e.name.value}": ${i.message}`)}return r?.convertExtensions?{...e,kind:_e.OBJECT_TYPE_DEFINITION}:e}import{Kind as S}from"/v135/graphql@16.8.1/denonext/graphql.mjs";function J(e,t,r,n){return t?{name:e.name,description:e.description||t.description,directives:u(e.directives,t.directives,r,n),kind:r?.convertExtensions||e.kind==="UnionTypeDefinition"||t.kind==="UnionTypeDefinition"?S.UNION_TYPE_DEFINITION:S.UNION_TYPE_EXTENSION,loc:e.loc,types:v(e.types,t.types,r)}:r?.convertExtensions?{...e,kind:S.UNION_TYPE_DEFINITION}:e}var N="SCHEMA_DEF_SYMBOL";function Ae(e){return"name"in e}function C(e,t,r={}){let n=r;for(let i of e)if(Ae(i)){let o=i.name?.value;if(t?.commentDescriptions&&ye(i),o==null)continue;if(t?.exclusions?.includes(o+".*")||t?.exclusions?.includes(o))delete n[o];else switch(i.kind){case f.OBJECT_TYPE_DEFINITION:case f.OBJECT_TYPE_EXTENSION:n[o]=V(i,n[o],t,r);break;case f.ENUM_TYPE_DEFINITION:case f.ENUM_TYPE_EXTENSION:n[o]=w(i,n[o],t,r);break;case f.UNION_TYPE_DEFINITION:case f.UNION_TYPE_EXTENSION:n[o]=J(i,n[o],t,r);break;case f.SCALAR_TYPE_DEFINITION:case f.SCALAR_TYPE_EXTENSION:n[o]=K(i,n[o],t,r);break;case f.INPUT_OBJECT_TYPE_DEFINITION:case f.INPUT_OBJECT_TYPE_EXTENSION:n[o]=Q(i,n[o],t,r);break;case f.INTERFACE_TYPE_DEFINITION:case f.INTERFACE_TYPE_EXTENSION:n[o]=G(i,n[o],t,r);break;case f.DIRECTIVE_DEFINITION:n[o]=U(i,n[o]);break}}else(i.kind===f.SCHEMA_DEFINITION||i.kind===f.SCHEMA_EXTENSION)&&(n[N]=X(i,n[N],t));return n}import{isDefinitionNode as De,isSchema as Oe,Kind as c,parse as xe}from"/v135/graphql@16.8.1/denonext/graphql.mjs";import{getDocumentNodeFromSchema as he,isDocumentNode as ke,printWithComments as Fe,resetComments as L}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";function $t(e,t){L();let r={kind:c.DOCUMENT,definitions:ge(e,{useSchemaDefinition:!0,forceSchemaDefinition:!1,throwOnConflict:!1,commentDescriptions:!1,...t})},n;return t?.commentDescriptions?n=Fe(r):n=r,L(),n}function _(e,t,r=[],n=[],i=new Set){if(e&&!i.has(e))if(i.add(e),typeof e=="function")_(e(),t,r,n,i);else if(Array.isArray(e))for(let o of e)_(o,t,r,n,i);else if(Oe(e)){let o=he(e,t);_(o.definitions,t,r,n,i)}else if(B(e)||H(e)){let o=xe(e,t);_(o.definitions,t,r,n,i)}else if(typeof e=="object"&&De(e))e.kind===c.DIRECTIVE_DEFINITION?r.push(e):n.push(e);else if(ke(e))_(e.definitions,t,r,n,i);else throw new Error(`typeDefs must contain only strings, documents, schemas, or functions, got ${typeof e}`);return{allDirectives:r,allNodes:n}}function ge(e,t){L();let{allDirectives:r,allNodes:n}=_(e,t),i=C(r,t),o=C(n,t,i);if(t?.useSchemaDefinition){let a=o[N]||{kind:c.SCHEMA_DEFINITION,operationTypes:[]},m=a.operationTypes;for(let p in k)if(!m.find(T=>T.operation===p)){let T=k[p],F=o[T];F!=null&&F.name!=null&&m.push({kind:c.OPERATION_TYPE_DEFINITION,type:{kind:c.NAMED_TYPE,name:F.name},operation:p})}a?.operationTypes?.length!=null&&a.operationTypes.length>0&&(o[N]=a)}t?.forceSchemaDefinition&&!o[N]?.operationTypes?.length&&(o[N]={kind:c.SCHEMA_DEFINITION,operationTypes:[{kind:c.OPERATION_TYPE_DEFINITION,operation:"query",type:{kind:c.NAMED_TYPE,name:{kind:c.NAME,value:"Query"}}}]});let s=Object.values(o);if(t?.sort){let a=typeof t.sort=="function"?t.sort:j;s.sort((m,p)=>a(m.name?.value,p.name?.value))}return s}import{mergeDeep as W}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";import{extractExtensionsFromSchema as Kt}from"/v135/@graphql-tools/utils@10.0.11/denonext/utils.mjs";function Ht(e){return W(e,!1,!0)}function y(e,t){e&&(e.extensions=W([e.extensions||{},t||{}],!1,!0))}function jt(e,t){y(e,t.schemaExtensions);for(let[r,n]of Object.entries(t.types||{})){let i=e.getType(r);if(i){if(y(i,n.extensions),n.type==="object"||n.type==="interface")for(let[o,s]of Object.entries(n.fields)){let a=i.getFields()[o];if(a){y(a,s.extensions);for(let[m,p]of Object.entries(s.arguments))y(a.args.find(d=>d.name===m),p)}}else if(n.type==="input")for(let[o,s]of Object.entries(n.fields)){let a=i.getFields()[o];y(a,s.extensions)}else if(n.type==="enum")for(let[o,s]of Object.entries(n.values)){let a=i.getValue(o);y(a,s)}}}return e}export{l as CompareVal,jt as applyExtensions,j as defaultStringComparator,Kt as extractExtensionsFromSchema,g as extractType,h as isListTypeNode,Ae as isNamedDefinitionNode,E as isNonNullTypeNode,H as isSourceTypes,B as isStringTypes,P as isWrappingTypeNode,M as mergeArguments,U as mergeDirective,u as mergeDirectives,w as mergeEnum,$ as mergeEnumValues,Ht as mergeExtensions,I as mergeFields,C as mergeGraphQLNodes,ge as mergeGraphQLTypes,Q as mergeInputType,G as mergeInterface,v as mergeNamedTypeArray,z as mergeResolvers,K as mergeScalar,V as mergeType,$t as mergeTypeDefs,J as mergeUnion,A as printTypeNode,N as schemaDefSymbol};
//# sourceMappingURL=merge.mjs.map