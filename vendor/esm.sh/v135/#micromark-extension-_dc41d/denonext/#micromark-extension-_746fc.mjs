/* esm.sh - esbuild bundle(micromark-extension-mdx-expression@3.0.0) denonext production */
import{factoryMdxExpression as f}from"/v135/micromark-factory-mdx-expression@2.0.1/denonext/micromark-factory-mdx-expression.mjs";import{factorySpace as F}from"/v135/micromark-factory-space@2.0.0/denonext/micromark-factory-space.mjs";import{markdownLineEnding as g,markdownSpace as z}from"/v135/micromark-util-character@2.0.1/denonext/micromark-util-character.mjs";function O(E){let r=E||{},l=r.addResult,o=r.acorn,m=r.spread,t=r.allowEmpty,p;if(t==null&&(t=!0),o){if(!o.parseExpressionAt)throw new Error("Expected a proper `acorn` instance passed in as `options.acorn`");p=Object.assign({ecmaVersion:2024,sourceType:"module"},r.acornOptions)}else if(r.acornOptions||r.addResult)throw new Error("Expected an `acorn` instance passed in as `options.acorn`");return{flow:{123:{name:"mdxFlowExpression",tokenize:w,concrete:!0}},text:{123:{name:"mdxTextExpression",tokenize:k}}};function w(e,c,s){let i=this;return x;function x(n){return T(n)}function T(n){return f.call(i,e,h,"mdxFlowExpression","mdxFlowExpressionMarker","mdxFlowExpressionChunk",o,p,l,m,t)(n)}function h(n){return z(n)?F(e,u,"whitespace")(n):u(n)}function u(n){let a=i.parser.constructs.flow[60],d=(Array.isArray(a)?a:a?[a]:[]).find(function(y){return y.name==="mdxJsxFlowTag"});return n===60&&d?e.attempt(d,u,s)(n):n===null||g(n)?c(n):s(n)}}function k(e,c){let s=this;return i;function i(x){return f.call(s,e,c,"mdxTextExpression","mdxTextExpressionMarker","mdxTextExpressionChunk",o,p,l,m,t,!0)(x)}}}export{O as mdxExpression};
//# sourceMappingURL=micromark-extension-mdx-expression.mjs.map